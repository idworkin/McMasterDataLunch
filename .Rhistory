knitr::opts_chunk$set(echo = FALSE)
require(lattice)
getwd()
install.packages("emss")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
require(lattice)
# Chunk 2: one_tail_t
curve(dt(x, 25), -5, 5,
lwd = 2, ylim = c(0, 0.5),
ylab = "prob",
xlab = expression(italic(t)),
main = expression(paste(italic(t), " distribution, ", "df = 24")))
# one tailed
#qt(0.95, 25)
shade_x <- c(1.71, seq(1.71, 4, 0.01), 4)
shade_y <- c(0, dt(seq(1.71, 4, 0.01), 24), 0)
polygon(shade_x, shade_y, col = 'grey60', border = NA)
text(3 , 0.3, paste("5%"), cex = 1.2, col = "grey60")
# Chunk 3: two_tail_t
curve(dt(x, 25), -5, 5,
lwd = 2, ylim = c(0, 0.5),
ylab = "prob",
xlab = expression(italic(t)),
main = expression(paste(italic(t), " distribution, ", "df = 24")))
# one tailed
#qt(0.975, 24)
shade_x <- c(2.06, seq(2.06, 4, 0.01), 4)
shade_y <- c(0, dt(seq(2.06, 4, 0.01), 24), 0)
shade_x2 <- c(-4, seq(-4, -2.06, 0.01), -2.06)
shade_y2 <- c(0, dt(seq(-4, -2.06, 0.01), 24), 0)
polygon(shade_x, shade_y, col = 'grey60', border = NA)
polygon(shade_x2, shade_y2, col = 'grey60', border = NA)
text(2.6 ,0.2, paste("2.5%"), cex = 1.2, col = "grey60")
text(-2.5 ,0.2, paste("2.5%"), cex = 1.2,col = "grey60")
# Chunk 4: sim_dat
x <- rnorm (1000,  10, 3)
y <- rnorm(length(x), 2 + 0.5*x, 2)
x2 <- x[1:300]
y2 <- y[1:300]
x3 <- x[1:50]
y3 <- y[1:50]
# Chunk 5: Plot_little_dat
par(mfrow = c(1,1))
plot(y3 ~ x3, pch = 20, col = "blue",
ylab = "fitness", xlab = "size",
xlim = c(2, 18), ylim = c(1, 16))
# Chunk 6: plot_bigDat
par(mfrow = c(1,3))
plot(y3 ~ x3, pch = 20, col = "blue",
ylab = "fitness", xlab = "size",
xlim = c(2, 18), ylim = c(1, 16))
plot(y2 ~ x2, pch = 20, col = "red",
ylab = "fitness", xlab = "size",
xlim = c(2, 18), ylim = c(1, 16))
plot( y ~ x, pch = 20, col = "purple",
ylab = "fitness", xlab = "size",
xlim = c(2, 18), ylim = c(1, 16))
par(mfrow = c(1,1))
# Chunk 7: qt
qt(p = 0.975, df = 24)
par(mar = c(5, 5, 1, 1))
curve(qt(p = 0.975,df = x), 2, 25,
col = "red", lwd = 3, cex.lab = 1.2,
main = "Critical values of t for different sample sizes",
xlab = "Sample Size",
ylab = expression(paste("t value (two tailed), ", alpha, " =0.05")))
?power.t.test
pow.test <- function(x){
###<b>
pow2 <- power.t.test(delta = 0.5, sd = 2,
sig.level = 0.05, power = x) # We only allow power to vary.
### </b>
return(pow2$n) # This pulls out the sample size we need
}
power.t.test(delta = 0.5, sd = 2,
sig.level = 0.05, power = x)
power.t.test(delta = 0.5, sd = 2,
sig.level = 0.05, power = 0.8)
pwr_t_check <- power.t.test(delta = 0.5, sd = 2,
sig.level = 0.05, power = 0.8)
pwr_t_check
str(pwr_t_check)
pwr_t_check$m
pwr_t_check$n
delta_vals = seq(from = 0.1, to = 0.5, by = 0.01)
delta_vals
pow.test <- function(x){
###<b>
pow2 <- power.t.test(delta = x, sd = 2,
sig.level = 0.05, power = 0.8) # We only allow delta to vary.
### </b>
return(pow2$n) # This pulls out the sample size we need
}
power.n <- sapply(delta_vals, pow.test)
plot(power.n ~ delta,
pch = 20, cex = 2, col = "red",
ylab="needed sample size",
main="sample size vs delta for t-test \n ( sd = 2 and alpha = 0.95)")
plot(power.n ~ delta_vals,
pch = 20, cex = 2, col = "red",
ylab="needed sample size",
main="sample size vs delta for t-test \n ( sd = 2 and alpha = 0.95)")
?power.anova
??power.anova.test
apropos("^power")
pwr_anova_SS <- power.anova.test(groups = 4, # how many groups
between.var = 1, # between group variance
within.var = 3, # within group variance
sig.level = 0.05, # alpha
power = .80)
pwr_anova_SS
library(lme4)
library(emmeans)
library(car)
library(ggplot2)
library(ggbeeswarm)
knitr::opts_chunk$set(echo = FALSE)
options(digits = 3, show.signif.stars = FALSE, show.coef.Pvalues = TRUE)
data(iris)
head(iris)
ggplot(iris, aes(y = Sepal.Length, x = Petal.Length, col = Species)) +
geom_point()
mod1 <- lm(Sepal.Length ~ Species,
data = iris)
anova(mod1)
summary(mod1)
SL_means_Species <- with(iris,
tapply(Sepal.Length, Species, mean))
SL_means_Species
species_predictedVals <- unique(predict(mod1))
species_predictedVals
names(species_predictedVals) <- c("setosa", "versicolor", "virginica")
species_predictedVals
SL_means_Species["versicolor"] - SL_means_Species["setosa"]
SL_means_Species["virginica"] - SL_means_Species["setosa"]
iris$Species2 <- relevel(iris$Species, "versicolor")
mod1_alt <- lm(Sepal.Length ~ Species2,
data = iris)
summary(mod1_alt)
unique(model.matrix(mod1))
unique(model.matrix(mod1_alt))
model.matrix(mod1)
species_predictedVals
1*species_predictedVals["versicolor"] - (1/2)*species_predictedVals["setosa"] - (1/2)*species_predictedVals["virginica"]
contrast_vector_example <- c(1, -0.5, -0.5)
sum(contrast_vector_example)
contrasts(iris$Species)
contrasts(iris$Species2)
levels(iris$Species)
setosa_virginica <- c(1, 0, -1)  # setosa VS virginica
versicolor_VS_others <- c(-0.5, 1, -0.5)
summary(mod1)
summary(mod1)
spp_em <- emmeans(mod1, ~Species)   # means
spp_em
plot(spp_em)
versicolor_VS_others
iris_custom_contrasts <- contrast(spp_em,
list(versicolor_VS_others = versicolor_VS_others,
virginica_VS_setosa = c(1, 0, -1)))
iris_custom_contrasts
confint(iris_custom_contrasts )
plot(iris_custom_contrasts) +
geom_vline(xintercept = 0, lty = 2 , alpha = 0.5) +
theme_bw() +
theme(text = element_text(size = 20))
?contrast-methods
contrast(spp_em, method = "pairwise")
plot(pairs(spp_em)) +
geom_vline(xintercept = 0, lty = 2 , alpha = 0.5) +
xlab("Estimated difference in Sepal Lengths")
pairs(spp_em, exclude = 2)
load("./contrast_tutorial_dat.RData")
size_dat <- contrast_tutorial_dat
head(size_dat)
ggplot(size_dat,
aes( y = length, x = selection:sex, col = sex, shape = replicate)) +
geom_beeswarm(alpha = 0.8, size = 1.4) +
labs( y = "length (mm)") +
ggtitle("thorax") +
theme_classic() +
theme(text = element_text(size = 18))
ggplot(size_dat,
aes( y = length, x = selection:sex, col = sex, shape = replicate)) +
geom_quasirandom(alpha = 0.8, size = 1.4) +
labs( y = "length (mm)") +
ggtitle("thorax") +
theme_classic() +
theme(text = element_text(size = 18))
mod1_thorax <- lmer(log2(length*1000) ~ (sex + selection + sampling)^2 + (0 + sex| replicate:selection),
data = size_dat,
subset = repeat_measure == "1")
Anova(mod1_thorax)
summary(mod1_thorax)
thorax_emm <- emmeans(mod1_thorax, specs = ~ sex | selection)
thorax_emm
plot(thorax_emm,
xlab = "model estimates, thorax length, log2 microM") +
theme_bw() +
theme(text = element_text(size = 16))
thorax_emm_response <- emmeans(mod1_thorax, specs = ~ sex | selection, type = "response")
thorax_emm_response
plot(thorax_emm_response,
xlab = "model estimates, thorax length, microM") +
theme_bw() +
theme(text = element_text(size = 16))
thorax_vals <- emmeans(mod1_thorax,
specs = ~ sex | selection)
SSD_contrasts_treatment <- pairs(thorax_vals)
SSD_contrasts_treatment
confint(SSD_contrasts_treatment)
plot(SSD_contrasts_treatment) +
geom_vline(xintercept = 0, lty = 2, alpha = 0.5) +
labs(x = "sexual size dimorphism") +
theme_bw() +
theme(text = element_text(size = 16))
thorax_ssd <- emmeans(mod1_thorax,  pairwise ~ sex*selection) # warning is letting you know these are not of general use. We only do this as we are forming an interaction contrast.
thorax_ssd_contrasts <- contrast(thorax_ssd[[1]],
interaction = c(selection = "trt.vs.ctrl1", sex = "pairwise"),
by = NULL)
thorax_ssd_contrasts
confint(thorax_ssd_contrasts)
plot(thorax_ssd_contrasts) +
geom_vline(xintercept = 0, lty = 2, alpha = 0.5) +
labs(x = "change in thorax SSD relative to control lineages", y = "comparison") +
theme_bw() +
theme(text = element_text(size = 16))
